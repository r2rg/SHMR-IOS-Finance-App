import SwiftUI

struct AccountView: View {
    @State private var viewModel = ViewModel()
    
    // –ö–æ–≥–¥–∞ —è –º–µ–Ω—è–ª —Ü–≤–µ—Ç —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –ø–æ—è–≤–ª—è–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∏–ª–¥–æ–º preview. –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å—ë —Ä–∞–≤–Ω–æ –±–∏–ª–¥–∏–ª–æ—Å—å –∏ —Ä–∞–±–æ—Ç–∞–ª–æ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º,—è –ø–æ–º–µ–Ω—è–ª –∫–æ–¥, —á—Ç–æ–±—ã pewview —Ä–∞–±–æ—Ç–∞–ª–æ
    private var balanceRowBG: Color {
        if viewModel.editing { return .white }
        return Color.accentColor
    }

    private var currencyRowBG: Color {
        if viewModel.editing { return .white }
        return Color.lightGreen
    }
    
    var body: some View {
        NavigationStack {
            List {
                Section() {
                    LabeledContent {
                        if viewModel.editing {
                            TextField("–ë–∞–ª–∞–Ω—Å", text: $viewModel.balanceText)
                                .keyboardType(.decimalPad)
                                .multilineTextAlignment(.trailing)
                                .foregroundStyle(Color.secondary)
                        } else {
                            // –¢—Ä—è—Å–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∫–ª—é—á–∏—Ç —ç—Ñ—Ñ–µ–∫—Ç, –∫–∞—Å–∞–Ω–∏–µ –µ–≥–æ –≤—ã–∫–ª—é—á–∏—Ç. –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è
                            Text(viewModel.processedBalance())
                                .spoiler(isOn: $viewModel.isBalanceSpoiled)
                                .onShake {
                                    if !viewModel.editing && !viewModel.isBalanceSpoiled {
                                        viewModel.isBalanceSpoiled = true
                                    }
                                }
                        }
                    } label: {
                        Label {
                            Text("–ë–∞–ª–∞–Ω—Å")
                        } icon: {
                            Text("üí∞")
                        }
                    }
                    .listRowBackground(balanceRowBG)
                    
                    Button {
                        if viewModel.editing {
                            viewModel.isPresentingCurrencyPicker.toggle()
                        }
                    } label: {
                        LabeledContent {
                            HStack {
                                Text(viewModel.account?.currency ?? "")
                                if viewModel.editing {
                                    Image(systemName: "chevron.right")
                                        .font(.caption.weight(.bold))
                                }
                            }
                        } label: {
                            Text("–í–∞–ª—é—Ç–∞")
                                .foregroundStyle(.black)
                        }
                    }
                    .listRowBackground(currencyRowBG)
                }
            }
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            .refreshable {
                await viewModel.fetchAccount()
             }
            .listRowSpacing(20)
            .navigationTitle("–ú–æ–π —Å—á—ë—Ç")
            .safeAreaPadding(.top)
            .toolbar {
                ToolbarItem(placement: .topBarTrailing) {
                    Button(!viewModel.editing ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å") {
                        viewModel.sanitizedBalance()
                        viewModel.editing.toggle()
                    }
                    .foregroundStyle(.purple)
                }
            }
            .confirmationDialog(
                "–í–∞–ª—é—Ç–∞",
                isPresented: $viewModel.isPresentingCurrencyPicker,
                titleVisibility: .visible
            ) {
                Button("–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å ‚ÇΩ") { viewModel.updateCurrency(to: "‚ÇΩ") }
                Button("–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä $") { viewModel.updateCurrency(to: "$") }
                Button("–ï–≤—Ä–æ ‚Ç¨") { viewModel.updateCurrency(to: "‚Ç¨") }
            }
        }
        .task {
            if viewModel.account == nil {
                await viewModel.fetchAccount()
            }
        }
        .overlay {
            if viewModel.isLoading {
                ProgressView()
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                    .background(Color.black.opacity(0.1))
            }
        }
        .alert(isPresented: .constant(viewModel.errorMessage != nil)) {
            Alert(
                title: Text("–û—à–∏–±–∫–∞"),
                message: Text(viewModel.errorMessage ?? ""),
                dismissButton: .default(Text("OK")) {
                    viewModel.errorMessage = nil
                }
            )
        }

    }
    
}

#Preview {
    AccountView()
}
